File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\bin\mt\signature\KillerApplication.java

package bin.mt.signature;

import android.app.Application;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.Signature;
import android.os.Build;
import android.os.Environment;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.Base64;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import org.lsposed.hiddenapibypass.HiddenApiBypass;

public class KillerApplication extends Application {
public static final String URL = "https://github.com/L-JINBIN/ApkSignatureKillerEx";

static {
killPM("com.facebook.videodownload.videodownloaderforfacebook", "MIICVzCCAcCgAwIBAgIEUfzLcjANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwI4NjERMA8GA1UE\nCBMIc2hhbmdoYWkxETAPBgNVBAcTCHNoYW5naGFpMREwDwYDVQQKEwhlbmVyZ3lzaDERMA8GA1UE\nCxMIZW5lcmd5c2gxFDASBgNVBAMTC2xpdWZhbmdxaW5nMCAXDTEzMDgwMzA5MjA1MFoYDzMwMTIx\nMjA0MDkyMDUwWjBvMQswCQYDVQQGEwI4NjERMA8GA1UECBMIc2hhbmdoYWkxETAPBgNVBAcTCHNo\nYW5naGFpMREwDwYDVQQKEwhlbmVyZ3lzaDERMA8GA1UECxMIZW5lcmd5c2gxFDASBgNVBAMTC2xp\ndWZhbmdxaW5nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCMcXE3yngOPmIqWHW7+6kgKpQA\nBlqpWfoVHMfTxSDz1o9zbB1WeL+K4iUF4Vq6q7Hag/1cJsNqM6eBr1GTj2hLIKP2USHyidrJ2OnX\nFnk8xxhGyJ92kUE5Q1SD09fpBQtuPGrP8roGDOdzRrnNiB6faC8T8Pm17RbUQ31Qua924QIDAQAB\nMA0GCSqGSIb3DQEBBQUAA4GBADkoDa05HrrUDXu+mzVYEyGgwpfnzdcKVZYblVA1ptbQAJNV14SP\nCc8YHnQWARZS6c6k1qhfJCSQcs+Ti2UggQe2K564mNiZzhDQrleaRbfSe81azD6fNuO5YbT0oSd6\napMWtwHucRnSSBvwmwgodc3YFjfPn9tQHfztrTT4+L3G\n");
killOpen("com.facebook.videodownload.videodownloaderforfacebook");
}

private static Field findField(Class<?> cls, String str) throws NoSuchFieldException {
try {
Field declaredField = cls.getDeclaredField(str);
declaredField.setAccessible(true);
return declaredField;
} catch (NoSuchFieldException e) {
Class<? super Object> cls2 = cls;
while (true) {
Class<? super Object> superclass = cls2.getSuperclass();
if (superclass == null || superclass.equals(Object.class)) {
throw e;
}
try {
Field declaredField2 = superclass.getDeclaredField(str);
declaredField2.setAccessible(true);
return declaredField2;
} catch (NoSuchFieldException unused) {
cls2 = superclass;
}
}
throw e;
}
}

private static String getApkPath(String str) {
BufferedReader bufferedReader;
String str2;
try {
bufferedReader = new BufferedReader(new FileReader("/proc/self/maps"));
do {
String readLine = bufferedReader.readLine();
if (readLine != null) {
String[] split = readLine.split("\\s+");
str2 = split[split.length - 1];
} else {
bufferedReader.close();
return null;
}
} while (!isApkPath(str, str2));
bufferedReader.close();
return str2;
} catch (Exception e) {
throw new RuntimeException(e);
} catch (Throwable th) {
th.addSuppressed(th);
}
throw th;
}

private static File getDataFile(String str) {
String name = Environment.getExternalStorageDirectory().getName();
if (name.matches("\\d+")) {
File file = new File("/data/user/" + name + "/" + str);
if (file.canWrite()) {
return file;
}
}
return new File("/data/data/" + str);
}

private static native void hookApkPath(String str, String str2);

private static boolean isApkPath(String str, String str2) {
if (str2.startsWith("/") && str2.endsWith(".apk")) {
String[] split = str2.substring(1).split("/", 6);
int length = split.length;
if (length == 4 || length == 5) {
if (split[0].equals("data") && split[1].equals("app") && split[length - 1].equals("base.apk")) {
return split[length - 2].startsWith(str);
}
if (split[0].equals("mnt") && split[1].equals("asec") && split[length - 1].equals("pkg.apk")) {
return split[length - 2].startsWith(str);
}
} else if (length == 3) {
if (split[0].equals("data") && split[1].equals("app")) {
return split[2].startsWith(str);
}
} else if (length == 6 && split[0].equals("mnt") && split[1].equals("expand") && split[3].equals("app") && split[5].equals("base.apk")) {
return split[4].endsWith(str);
}
}
return false;
}

private static void killOpen(String str) {
FileOutputStream fileOutputStream;
try {
System.loadLibrary("SignatureKiller");
String apkPath = getApkPath(str);
if (apkPath == null) {
System.err.println("Get apk path failed");
return;
}
File file = new File(apkPath);
File file2 = new File(getDataFile(str), "origin.apk");
try {
ZipFile zipFile = new ZipFile(file);
try {
ZipEntry entry = zipFile.getEntry("assets/SignatureKiller/origin.apk");
if (entry == null) {
PrintStream printStream = System.err;
printStream.println("Entry not found: " + "assets/SignatureKiller/origin.apk");
zipFile.close();
return;
}
if (!file2.exists() || file2.length() != entry.getSize()) {
InputStream inputStream = zipFile.getInputStream(entry);
try {
fileOutputStream = new FileOutputStream(file2);
byte[] bArr = new byte[102400];
while (true) {
int read = inputStream.read(bArr);
if (read == -1) {
break;
}
fileOutputStream.write(bArr, 0, read);
}
fileOutputStream.close();
if (inputStream != null) {
inputStream.close();
}
} catch (Throwable th) {
if (inputStream != null) {
inputStream.close();
}
throw th;
}
}
zipFile.close();
hookApkPath(file.getAbsolutePath(), file2.getAbsolutePath());
return;
} catch (Throwable th2) {
zipFile.close();
throw th2;
}
} catch (IOException e) {
throw new RuntimeException(e);
} catch (Throwable th3) {
th2.addSuppressed(th3);
}
throw th;
} catch (Throwable unused) {
System.err.println("Load SignatureKiller library failed");
}
}

private static void killPM(final String str, String str2) {
final Signature signature = new Signature(Base64.decode(str2, 0));
final Parcelable.Creator creator = PackageInfo.CREATOR;
try {
findField(PackageInfo.class, "CREATOR").set((Object) null, new Parcelable.Creator<PackageInfo>() {
public PackageInfo createFromParcel(Parcel parcel) {
Signature[] apkContentsSigners;
PackageInfo packageInfo = (PackageInfo) creator.createFromParcel(parcel);
if (packageInfo.packageName.equals(str)) {
if (packageInfo.signatures != null && packageInfo.signatures.length > 0) {
packageInfo.signatures[0] = signature;
}
if (Build.VERSION.SDK_INT >= 28 && packageInfo.signingInfo != null && (apkContentsSigners = packageInfo.signingInfo.getApkContentsSigners()) != null && apkContentsSigners.length > 0) {
apkContentsSigners[0] = signature;
}
}
return packageInfo;
}

public PackageInfo[] newArray(int i) {
return (PackageInfo[]) creator.newArray(i);
}
});
if (Build.VERSION.SDK_INT >= 28) {
HiddenApiBypass.addHiddenApiExemptions("Landroid/os/Parcel;", "Landroid/content/pm", "Landroid/app");
}
try {
Object obj = findField(PackageManager.class, "sPackageInfoCache").get((Object) null);
obj.getClass().getMethod("clear", new Class[0]).invoke(obj, new Object[0]);
} catch (Throwable unused) {
}
try {
((Map) findField(Parcel.class, "mCreators").get((Object) null)).clear();
} catch (Throwable unused2) {
}
try {
((Map) findField(Parcel.class, "sPairedCreators").get((Object) null)).clear();
} catch (Throwable unused3) {
}
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$AccessibleObject.java

package org.lsposed.hiddenapibypass;

public class Helper$AccessibleObject {
private boolean override;
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$Class.java

package org.lsposed.hiddenapibypass;

public final class Helper$Class {
private transient int accessFlags;
private transient int classFlags;
private transient ClassLoader classLoader;
private transient int classSize;
private transient int clinitThreadId;
private transient Class componentType;
private transient short copiedMethodsOffset;
private transient Object dexCache;
private transient int dexClassDefIndex;
private volatile transient int dexTypeIndex;
private transient Object extData;
private transient long iFields;
private transient Object[] ifTable;
private transient long methods;
private transient String name;
private transient int numReferenceInstanceFields;
private transient int numReferenceStaticFields;
private transient int objectSize;
private transient int objectSizeAllocFastPath;
private transient int primitiveType;
private transient int referenceInstanceOffsets;
private transient long sFields;
private transient int status;
private transient Class superClass;
private transient short virtualMethodsOffset;
private transient Object vtable;
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$Executable.java

package org.lsposed.hiddenapibypass;

public final class Helper$Executable extends Helper$AccessibleObject {
private int accessFlags;
private long artMethod;
private Helper$Class declaringClass;
private Helper$Class declaringClassOfOverriddenMethod;
private Object[] parameters;
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$HandleInfo.java

package org.lsposed.hiddenapibypass;

import java.lang.reflect.Member;

public final class Helper$HandleInfo {
private final Helper$MethodHandle handle = null;
private final Member member = null;
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$InvokeStub.java

package org.lsposed.hiddenapibypass;

public class Helper$InvokeStub {
private Helper$InvokeStub(Object... objArr) {
throw new IllegalStateException("Failed to new a instance");
}

private static Object invoke(Object... objArr) {
throw new IllegalStateException("Failed to invoke the method");
}
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$MethodHandle.java

package org.lsposed.hiddenapibypass;

import java.lang.invoke.MethodType;

public class Helper$MethodHandle {
protected final long artFieldOrMethod = 0;
private Helper$MethodHandle cachedSpreadInvoker;
protected final int handleKind = 0;
private MethodType nominalType;
private final MethodType type = null;
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$MethodHandleImpl.java

package org.lsposed.hiddenapibypass;

import java.lang.invoke.MethodHandleInfo;

public final class Helper$MethodHandleImpl extends Helper$MethodHandle {
private final MethodHandleInfo info = null;
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\Helper$NeverCall.java

package org.lsposed.hiddenapibypass;

public class Helper$NeverCall {
private static int s;
private static int t;
private int i;
private int j;

private static void a() {
}

private static void b() {
}
}

File: C:\Users\Momoo\Desktop\funktions dateien\classes11.dex_Decompiler.com\sources\org\lsposed\hiddenapibypass\HiddenApiBypass.java

package org.lsposed.hiddenapibypass;

import android.util.Log;
import dalvik.system.VMRuntime;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandleInfo;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.Constructor;
import java.lang.reflect.Executable;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import sun.misc.Unsafe;

public final class HiddenApiBypass {
private static final Unsafe a;
private static final long b;
private static final long c;
private static final long d;
private static final long e;
private static final long f;
private static final long g;
private static final long h;
private static final long i;
private static final long j;
private static final long k;
private static final long l;
private static final long m;
private static final Set n = new HashSet();

static {
try {
Unsafe unsafe = (Unsafe) Unsafe.class.getDeclaredMethod("getUnsafe", new Class[0]).invoke((Object) null, new Object[0]);
a = unsafe;
b = unsafe.objectFieldOffset(Helper$Executable.class.getDeclaredField("artMethod"));
c = unsafe.objectFieldOffset(Helper$Executable.class.getDeclaredField("declaringClass"));
long objectFieldOffset = unsafe.objectFieldOffset(Helper$MethodHandle.class.getDeclaredField("artFieldOrMethod"));
d = objectFieldOffset;
e = unsafe.objectFieldOffset(Helper$MethodHandleImpl.class.getDeclaredField("info"));
long objectFieldOffset2 = unsafe.objectFieldOffset(Helper$Class.class.getDeclaredField("methods"));
f = objectFieldOffset2;
long objectFieldOffset3 = unsafe.objectFieldOffset(Helper$Class.class.getDeclaredField("iFields"));
g = objectFieldOffset3;
h = unsafe.objectFieldOffset(Helper$Class.class.getDeclaredField("sFields"));
i = unsafe.objectFieldOffset(Helper$HandleInfo.class.getDeclaredField("member"));
Method declaredMethod = Helper$NeverCall.class.getDeclaredMethod("a", new Class[0]);
Method declaredMethod2 = Helper$NeverCall.class.getDeclaredMethod("b", new Class[0]);
declaredMethod.setAccessible(true);
declaredMethod2.setAccessible(true);
MethodHandle unreflect = MethodHandles.lookup().unreflect(declaredMethod);
MethodHandle unreflect2 = MethodHandles.lookup().unreflect(declaredMethod2);
long j2 = unsafe.getLong(unreflect, objectFieldOffset);
long j3 = unsafe.getLong(unreflect2, objectFieldOffset);
long j4 = unsafe.getLong(Helper$NeverCall.class, objectFieldOffset2);
long j5 = j3 - j2;
j = j5;
k = (j2 - j4) - j5;
Field declaredField = Helper$NeverCall.class.getDeclaredField("i");
Field declaredField2 = Helper$NeverCall.class.getDeclaredField("j");
declaredField.setAccessible(true);
declaredField2.setAccessible(true);
MethodHandle unreflectGetter = MethodHandles.lookup().unreflectGetter(declaredField);
MethodHandle unreflectGetter2 = MethodHandles.lookup().unreflectGetter(declaredField2);
long j6 = unsafe.getLong(unreflectGetter, objectFieldOffset);
long j7 = unsafe.getLong(unreflectGetter2, objectFieldOffset);
long j8 = unsafe.getLong(Helper$NeverCall.class, objectFieldOffset3);
l = j7 - j6;
m = j6 - j8;
} catch (ReflectiveOperationException e2) {
Log.e("HiddenApiBypass", "Initialize error", e2);
throw new ExceptionInInitializerError(e2);
}
}

static boolean a(Class[] clsArr, Object[] objArr) {
if (clsArr.length != objArr.length) {
return false;
}
for (int i2 = 0; i2 < clsArr.length; i2++) {
if (!clsArr[i2].isPrimitive()) {
Object obj = objArr[i2];
if (obj != null && !clsArr[i2].isInstance(obj)) {
return false;
}
} else if (clsArr[i2] == Integer.TYPE && !(objArr[i2] instanceof Integer)) {
return false;
} else {
if (clsArr[i2] == Byte.TYPE && !(objArr[i2] instanceof Byte)) {
return false;
}
if (clsArr[i2] == Character.TYPE && !(objArr[i2] instanceof Character)) {
return false;
}
if (clsArr[i2] == Boolean.TYPE && !(objArr[i2] instanceof Boolean)) {
return false;
}
if (clsArr[i2] == Double.TYPE && !(objArr[i2] instanceof Double)) {
return false;
}
if (clsArr[i2] == Float.TYPE && !(objArr[i2] instanceof Float)) {
return false;
}
if (clsArr[i2] == Long.TYPE && !(objArr[i2] instanceof Long)) {
return false;
}
if (clsArr[i2] == Short.TYPE && !(objArr[i2] instanceof Short)) {
return false;
}
}
}
return true;
}

public static boolean addHiddenApiExemptions(String... strArr) {
Set set = n;
set.addAll(Arrays.asList(strArr));
String[] strArr2 = new String[((HashSet) set).size()];
set.toArray(strArr2);
return setHiddenApiExemptions(strArr2);
}

public static boolean clearHiddenApiExemptions() {
((HashSet) n).clear();
return setHiddenApiExemptions(new String[0]);
}

public static Constructor getDeclaredConstructor(Class cls, Class... clsArr) {
for (Executable executable : getDeclaredMethods(cls)) {
if (executable instanceof Constructor) {
Class[] parameterTypes = executable.getParameterTypes();
if (parameterTypes.length != clsArr.length) {
continue;
} else {
int i2 = 0;
while (i2 < clsArr.length) {
if (clsArr[i2] == parameterTypes[i2]) {
i2++;
}
}
return (Constructor) executable;
}
}
}
throw new NoSuchMethodException("Cannot find matching constructor");
}

public static Method getDeclaredMethod(Class cls, String str, Class... clsArr) {
for (Executable executable : getDeclaredMethods(cls)) {
if (executable.getName().equals(str) && (executable instanceof Method)) {
Class[] parameterTypes = executable.getParameterTypes();
if (parameterTypes.length != clsArr.length) {
continue;
} else {
int i2 = 0;
while (i2 < clsArr.length) {
if (clsArr[i2] == parameterTypes[i2]) {
i2++;
}
}
return (Method) executable;
}
}
}
throw new NoSuchMethodException("Cannot find matching method");
}

public static List getDeclaredMethods(Class cls) {
ArrayList arrayList = new ArrayList();
if (!cls.isPrimitive() && !cls.isArray()) {
try {
Method declaredMethod = Helper$NeverCall.class.getDeclaredMethod("a", new Class[0]);
declaredMethod.setAccessible(true);
MethodHandle unreflect = MethodHandles.lookup().unreflect(declaredMethod);
Unsafe unsafe = a;
long j2 = unsafe.getLong(cls, f);
if (j2 == 0) {
return arrayList;
}
int i2 = unsafe.getInt(j2);
for (int i3 = 0; i3 < i2; i3++) {
long j3 = (((long) i3) * j) + j2 + k;
Unsafe unsafe2 = a;
unsafe2.putLong(unreflect, d, j3);
unsafe2.putObject(unreflect, e, (Object) null);
try {
MethodHandles.lookup().revealDirect(unreflect);
} catch (Throwable unused) {
}
Unsafe unsafe3 = a;
arrayList.add((Executable) unsafe3.getObject((MethodHandleInfo) unsafe3.getObject(unreflect, e), i));
}
} catch (IllegalAccessException | NoSuchMethodException unused2) {
}
}
return arrayList;
}

public static List getInstanceFields(Class cls) {
ArrayList arrayList = new ArrayList();
if (!cls.isPrimitive() && !cls.isArray()) {
try {
Field declaredField = Helper$NeverCall.class.getDeclaredField("i");
declaredField.setAccessible(true);
MethodHandle unreflectGetter = MethodHandles.lookup().unreflectGetter(declaredField);
Unsafe unsafe = a;
long j2 = unsafe.getLong(cls, g);
if (j2 == 0) {
return arrayList;
}
int i2 = unsafe.getInt(j2);
for (int i3 = 0; i3 < i2; i3++) {
long j3 = (((long) i3) * l) + j2 + m;
Unsafe unsafe2 = a;
unsafe2.putLong(unreflectGetter, d, j3);
unsafe2.putObject(unreflectGetter, e, (Object) null);
try {
MethodHandles.lookup().revealDirect(unreflectGetter);
} catch (Throwable unused) {
}
Unsafe unsafe3 = a;
arrayList.add((Field) unsafe3.getObject((MethodHandleInfo) unsafe3.getObject(unreflectGetter, e), i));
}
} catch (IllegalAccessException | NoSuchFieldException unused2) {
}
}
return arrayList;
}

public static List getStaticFields(Class cls) {
ArrayList arrayList = new ArrayList();
if (!cls.isPrimitive() && !cls.isArray()) {
try {
Field declaredField = Helper$NeverCall.class.getDeclaredField("s");
declaredField.setAccessible(true);
MethodHandle unreflectGetter = MethodHandles.lookup().unreflectGetter(declaredField);
Unsafe unsafe = a;
long j2 = unsafe.getLong(cls, h);
if (j2 == 0) {
return arrayList;
}
int i2 = unsafe.getInt(j2);
for (int i3 = 0; i3 < i2; i3++) {
long j3 = (((long) i3) * l) + j2 + m;
Unsafe unsafe2 = a;
unsafe2.putLong(unreflectGetter, d, j3);
unsafe2.putObject(unreflectGetter, e, (Object) null);
try {
MethodHandles.lookup().revealDirect(unreflectGetter);
} catch (Throwable unused) {
}
Unsafe unsafe3 = a;
arrayList.add((Field) unsafe3.getObject((MethodHandleInfo) unsafe3.getObject(unreflectGetter, e), i));
}
} catch (IllegalAccessException | NoSuchFieldException unused2) {
}
}
return arrayList;
}

public static Object invoke(Class cls, Object obj, String str, Object... objArr) {
Object obj2 = obj;
Object[] objArr2 = objArr;
if (obj2 == null || cls.isInstance(obj)) {
Method declaredMethod = Helper$InvokeStub.class.getDeclaredMethod("invoke", new Class[]{Object[].class});
declaredMethod.setAccessible(true);
Unsafe unsafe = a;
Class cls2 = cls;
long j2 = unsafe.getLong(cls, f);
if (j2 != 0) {
int i2 = unsafe.getInt(j2);
for (int i3 = 0; i3 < i2; i3++) {
Method method = declaredMethod;
a.putLong(method, b, (((long) i3) * j) + j2 + k);
if (str.equals(declaredMethod.getName()) && a(declaredMethod.getParameterTypes(), objArr2)) {
return declaredMethod.invoke(obj2, objArr2);
}
}
throw new NoSuchMethodException("Cannot find matching method");
}
throw new NoSuchMethodException("Cannot find matching method");
}
throw new IllegalArgumentException("this object is not an instance of the given class");
}

public static Object newInstance(Class cls, Object... objArr) {
Class cls2 = cls;
Object[] objArr2 = objArr;
Method declaredMethod = Helper$InvokeStub.class.getDeclaredMethod("invoke", new Class[]{Object[].class});
Constructor<Helper$InvokeStub> declaredConstructor = Helper$InvokeStub.class.getDeclaredConstructor(new Class[]{Object[].class});
declaredConstructor.setAccessible(true);
Unsafe unsafe = a;
long j2 = unsafe.getLong(cls2, f);
if (j2 != 0) {
int i2 = unsafe.getInt(j2);
for (int i3 = 0; i3 < i2; i3++) {
long j3 = (((long) i3) * j) + j2 + k;
Unsafe unsafe2 = a;
long j4 = b;
Unsafe unsafe3 = unsafe2;
unsafe2.putLong(declaredMethod, j4, j3);
if ("<init>".equals(declaredMethod.getName())) {
unsafe3.putLong(declaredConstructor, j4, j3);
unsafe3.putObject(declaredConstructor, c, cls2);
if (a(declaredConstructor.getParameterTypes(), objArr2)) {
return declaredConstructor.newInstance(objArr2);
}
}
}
throw new NoSuchMethodException("Cannot find matching constructor");
}
throw new NoSuchMethodException("Cannot find matching constructor");
}

public static boolean setHiddenApiExemptions(String... strArr) {
try {
invoke(VMRuntime.class, invoke(VMRuntime.class, (Object) null, "getRuntime", new Object[0]), "setHiddenApiExemptions", strArr);
return true;
} catch (Throwable th) {
Log.w("HiddenApiBypass", "setHiddenApiExemptions", th);
return false;
}
}
}

